/*
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 *  Copyright:
 *
 *  XMLNuke: A Web Development Framework based on XML.
 *
 *  Main Specification: Joao Gilberto Magalhaes, joao at byjg dot com
 *  CSharp Implementation: Joao Gilberto Magalhaes, joao at byjg dot com
 *
 *  This file is part of XMLNuke project. Visit http://www.xmlnuke.com
 *  for more information.
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 */

using System;
using System.Xml;
using com.xmlnuke.thirdparty;

namespace com.xmlnuke.classes
{

	///<summary>
	///This class will be define a single XML InputImageValidate.
	///This XML need be transformed to generate a PNG Image with a random number and chars/
	///The method Validate will test if a sequence is typed corretly or not.
	///</summary>
	public class XmlInputImageValidate : XmlnukeDocumentObject
	{

		protected string _caption;
		protected int _chars = 5;
		protected char _challengeQuestion = '1';

		public XmlInputImageValidate(string caption)
		{
			this._caption = caption;
		}

		public void UseChallengeQuestion(bool b)
		{
			this._challengeQuestion = (b ? '1' : '0');
		}
		
		public void NumberOfChars(int c)
		{
			this._chars = c;
		}
	
		/**
		*@desc Generate page, processing yours childs.
		*@param DOMNode current
		*@return void
		*/
		override public void generateObject(XmlNode current)
		{
			XmlNode nodeWorking = util.XmlUtil.CreateChild(current, "imagevalidate", "");
			util.XmlUtil.AddAttribute(nodeWorking, "caption", this._caption);
			util.XmlUtil.AddAttribute(nodeWorking, "challengequestion", this._challengeQuestion);
			util.XmlUtil.AddAttribute(nodeWorking, "chars", this._chars.ToString());
		}

		/**
		 * Validate if the text type by the user matchs with the text generated by the 
		 * XmlInputImageValidate is correct or not
		 *
		 * @param Context context
		 * @param string text
		 */
		public static bool validateText(engine.Context context)
		{
			return ADSSAntiBot.TextIsValid(context, context.ContextValue("imagevalidate"));
		}

	}

}