/*
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 *  Copyright:
 *
 *  XMLNuke: A Web Development Framework based on XML.
 *
 *  Main Specification: Joao Gilberto Magalhaes, joao at byjg dot com
 *  CSharp Implementation: Joao Gilberto Magalhaes, joao at byjg dot com
 * 
 *  This file is part of XMLNuke project. Visit http://www.xmlnuke.com
 *  for more information.
 *  
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= 
 */

using System;
using System.Xml;
using com.xmlnuke.util;
using com.xmlnuke.engine;
using com.xmlnuke.anydataset;
using com.xmlnuke.international;
using com.xmlnuke.processor;
using System.Collections;
using System.Collections.Specialized;

namespace com.xmlnuke.classes
{
	public class XmlnukePoll : XmlnukeDocumentObject
	{
		private Context _context;
		private string _url;
		private string _poll;
		private string _lang;
		private bool _processed;
		private LanguageCollection _myWords;
		private AnyDataSet _anyPoll;
		private AnyDataSet _anyAnswer;

		private int _width;
		private int _height;

		/* POLL CONFIG */
		protected string _tblpoll = "";
		protected string _tblanswer = "";
		protected string _tbllastip = "";
		protected bool _isdb = false;
		protected string _connection = "";
		protected bool _error = false;


		public XmlnukePoll(Context context, string urlProcess, string poll)
			: this(context, urlProcess, poll, "")
		{ }

		/**
		 * Initialize a poll context
		 * Use the method processData to process data.
		 *
		 * @param Context context
		 * @param string urlProcess
		 * @param string poll
		 * @param string lang
		 * @return XmlnukePoll
		 */
		public XmlnukePoll(Context context, string urlProcess, string poll, string lang)
		{
			this._context = context;
			this._url = urlProcess;
			this._poll = poll;
			if (lang != "")
			{
				this._lang = lang;
			}
			else
			{
				this._lang = this._context.Language.Name;
			}
			this._processed = false;
			this.getPollConfig();
			this._myWords = LanguageFactory.GetLanguageCollection(this._context, LanguageFileTypes.OBJECT, ((object)this).GetType().FullName);
		}

		/**
		 * Get informations about WHERE I need to store poll data
		 *
		 */
		protected void getPollConfig()
		{
			AnydatasetFilenameProcessor pollfile = new AnydatasetFilenameProcessor("_poll", this._context);
			AnyDataSet anyconfig = new AnyDataSet(pollfile);

			IIterator it = anyconfig.getIterator();
			if (it.hasNext())
			{
				SingleRow sr = it.moveNext();
				this._isdb = sr.getField("dbname") != "-anydata-";
				this._connection = sr.getField("dbname");
				this._tblanswer = sr.getField("tbl_answer");
				this._tblpoll = sr.getField("tbl_poll");
				this._tbllastip = sr.getField("tbl_lastip");
			}
			else
			{
				this._error = true;
			}
		}

		/**
		 * Get AnydataSet Poll information
		 *
		 */
		protected void getAnyData()
		{
			AnydatasetFilenameProcessor filepoll = new AnydatasetFilenameProcessor("poll_list", this._context);
			this._anyPoll = new AnyDataSet(filepoll);
			AnydatasetFilenameProcessor fileanswer = new AnydatasetFilenameProcessor("poll_" + this._poll + "_" + this._lang, this._context);
			this._anyAnswer = new AnyDataSet(fileanswer);
		}

		public void processVote()
		{
			this.processVote(450, 400);
		}

		/**
		 * Process Vote. Note that the system ONLY process the vote if there is no another equal IP.
		 *
		 * @param int width
		 * @param int height
		 */
		public void processVote(int width, int height)
		{
			if (this._context.ContextValue("xcrt") == "") // TRICK CODE HERE. THIS VALUE IS GENERATED BY CHART.
			// WE HAVE TO USE THIS TO AVOID TWO processVote() calling.
			{
				// Is The Post values needed to process vote exists?
				if ((this._context.ContextValue("xmlnuke_poll") != "") && (this._context.ContextValue("xmlnuke_polllang") != "") && (this._context.ContextValue("xmlnuke_pollanswer") != ""))
				{
					this._poll = this._context.ContextValue("xmlnuke_poll");
					this._lang = this._context.ContextValue("xmlnuke_polllang");

					// Try to get the Last IP who vote here.
					bool ok = false;
					AnydatasetFilenameProcessor filelastip = new AnydatasetFilenameProcessor("poll_lastip_" + this._poll, this._context);
					AnyDataSet anylastip = new AnyDataSet(filelastip);
					IIterator itlastip = anylastip.getIterator();
					if (itlastip.hasNext())
					{
						SingleRow sr = itlastip.moveNext();
						string[] arr = sr.getFieldArray("ip");

						// Is The maximum amount of unique IP reached?
						// If true, I need to remove the excess. 
						anylastip.removeRow(sr);
						anylastip.appendRow();
						bool found = false;
						for (int i = 0; i < arr.Length - 1; i++) // I want to remove the last from this list.
						{
							if (arr[i] == this._context.ContextValue("REMOTE_ADDR"))
							{
								found = true;
							}
							anylastip.addField("ip", arr[i]);
						}

						// Is This a New IP?
						if (!found)
						{
							ok = true;
							sr.AddField("ip", this._context.ContextValue("REMOTE_ADDR"));
						}
						anylastip.Save();
					}
					// OK. First time here. I need to add the IP.
					else
					{
						ok = true;
						anylastip.appendRow();
						anylastip.addField("ip", this._context.ContextValue("REMOTE_ADDR"));
						anylastip.Save();
					}

					// Is My IP Unique? If true I can process the vote.
					// Note if the poll name, lang and code are wrong the system does not do anything. 
					if (ok)
					{
						// Get Data
						IteratorFilter itf = new IteratorFilter();
						itf.addRelation("name", Relation.Equal, this._poll);
						itf.addRelation("lang", Relation.Equal, this._lang);
						itf.addRelation("code", Relation.Equal, this._context.ContextValue("xmlnuke_pollanswer"));
						if (this._isdb)
						{
							DBDataSet dbdata = new DBDataSet(this._connection, this._context);
							DbParameters param;
							string sql = itf.getSql(this._tblanswer, out param); // Use only to get Where clause
							int i = sql.IndexOf(this._tblanswer);
							sql = "update " + this._tblanswer + " set " +
								" votes = votes + 1 " +
								sql.Substring(i + this._tblanswer.Length + 1);
							dbdata.execSQL(sql, param);
						}
						else
						{
							this.getAnyData();
							IIterator itAnswer = this._anyAnswer.getIterator(itf);
							if (itAnswer.hasNext())
							{
								SingleRow sr = itAnswer.moveNext();
								int votes;
								Int32.TryParse(sr.getField("votes"), out votes);
								sr.setField("votes", (votes + 1).ToString());
								this._anyAnswer.Save();
							}
						}
					}

					this._processed = true;
				}
			}
			else
			{
				this._processed = true;
			}
			this._width = width;
			this._height = height;
		}

		public override void generateObject(XmlNode current)
		{
			// Is there some error?
			if (this._error)
			{
				XmlNode nodeWorking = XmlUtil.CreateChild(current, "poll");
				XmlUtil.CreateChild(nodeWorking, "error", this._myWords.Value("ERROR_POLLNOTSETUP"));
			}
			else
			{
				// Get Data to SHOW the answers OR chart.
				IteratorFilter itf = new IteratorFilter();
				itf.addRelation("name", Relation.Equal, this._poll);
				itf.addRelation("lang", Relation.Equal, this._lang);
				IIterator itAnswer;
				IIterator itPoll;
				if (this._isdb)
				{
					DBDataSet dbdata = new DBDataSet(this._connection, this._context);
					DbParameters param;
					string sql = itf.getSql(this._tblpoll, out param);
					itPoll = dbdata.getIterator(sql, param);

					sql = itf.getSql(this._tblanswer, out param);
					itAnswer = dbdata.getIterator(sql, param);
				}
				else
				{
					this.getAnyData();
					itPoll = this._anyPoll.getIterator(itf);
					itAnswer = this._anyAnswer.getIterator(itf);
				}

				// Show the answers if not was called the method processVote()
				if (!this._processed)
				{
					XmlNode nodeWorking = XmlUtil.CreateChild(current, "poll");
					XmlUtil.AddAttribute(nodeWorking, "url", this._url);
					XmlUtil.AddAttribute(nodeWorking, "name", this._poll);
					XmlUtil.AddAttribute(nodeWorking, "lang", this._lang);

					// Show Data Only if Poll is active
					if (itPoll.hasNext())
					{
						SingleRow sr = itPoll.moveNext();

						if (sr.getField("active") == "Y")
						{
							XmlUtil.AddAttribute(nodeWorking, "active", "true");
							XmlUtil.AddAttribute(nodeWorking, "sendbtn", this._myWords.Value("SENDBTN"));
							XmlUtil.CreateChild(nodeWorking, "question", sr.getField("question"));

							while (itAnswer.hasNext())
							{
								SingleRow srA = itAnswer.moveNext();
								XmlNode nodeanswer = XmlUtil.CreateChild(nodeWorking, "answer", srA.getField("answer"));
								XmlUtil.AddAttribute(nodeanswer, "code", srA.getField("code"));
							}
						}
						else
						{
							XmlUtil.AddAttribute(nodeWorking, "sendbtn", this._myWords.Value("VIEWRESULTSBTN"));
							XmlUtil.CreateChild(nodeWorking, "question", sr.getField("question") + " - " + this._myWords.Value("POLLENDED"));
						}
					}
					else
					{
						XmlUtil.CreateChild(nodeWorking, "error", this._myWords.Value("ERROR_POLLEMPTY"));
					}
				}
				// Show the chart if poll is processed.
				else
				{
					SingleRow srPoll = itPoll.moveNext();

					if (srPoll.getField("showresults") == "Y")
					{
						NameValueCollection fldGrp = new NameValueCollection();

						AnyDataSet anyGraph = new AnyDataSet();
						anyGraph.appendRow();
						anyGraph.addField("data", "");
						while (itAnswer.hasNext())
						{
							SingleRow sr = itAnswer.moveNext();
							anyGraph.addField("qty_" + sr.getField("code"), sr.getField("votes"));
							fldGrp["qty_" + sr.getField("code")] = sr.getField("short");
						}
						IIterator itGraphInv = anyGraph.getIterator();

						XmlChart chart = new XmlChart(this._context, "Title", itGraphInv, ChartOutput.Flash, ChartSeriesFormat.Column);
						chart.setFrame(this._width, this._height);
						chart.setLegend("data", "#444444", "#FFFFFF");
						chart.setAreaColor("#000000", "#ddddee");
						foreach (string key in fldGrp.Keys)
						{
							chart.addSeries(key, fldGrp[key], "#000000");
						}

						chart.generateObject(current);
					}
					else
					{
						XmlnukeText txt;
						if (srPoll.getField("active") == "Y")
						{
							txt = new XmlnukeText(this._myWords.Value("VOTECOMPUTED"), true);
						}
						else
						{
							txt = new XmlnukeText(this._myWords.Value("CANNOTSHOWRESULTS"), true);
						}
						txt.generateObject(current);
					}
				}
			}
		}

	}
}