<%@ Page Language="c#" ValidateRequest="false" %>
<%@Import Namespace="System.Collections.Specialized" %>
<%@Import Namespace="System.Collections" %>
<%@Import Namespace="System.IO" %>
<%@Import Namespace="System.Security.Permissions" %>

<HTML>
<title>XMLNuke Check Install and Setup Manager</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">

<img src="common/imgs/logo_xmlnuke2.gif" border="0">

<style type="text/css">
body {background-color: #ffffff; color: #000000;}
body, td, th, h1, h2 {font-family: sans-serif;}
pre {margin: 0px; font-family: monospace;}
a:link {color: #000099; text-decoration: none; background-color: #ffffff;}
a:hover {text-decoration: underline;}
table {border-collapse: collapse;}
.center {text-align: center;}
.center table { margin-left: auto; margin-right: auto; text-align: left;}
.center th { text-align: center !important; }
td, th { border: 1px solid #000000; font-size: 75%; vertical-align: baseline;}
h1 {font-size: 150%;}
h2 {font-size: 125%;}
.p {text-align: left;}
.e {background-color: #ccccff; font-weight: bold; color: #000000;}
.h {background-color: #9999cc; font-weight: bold; color: #000000;}
.v {background-color: #cccccc; color: #000000;}
.vr {background-color: #cccccc; text-align: right; color: #000000;}
hr {width: 600px; background-color: #cccccc; border: 0px; height: 1px; color: #000000;}
</style>

<script runat="server">
////////
//////// ACTION UTILITIES
////////

void WelcomeMessage()
{
	Response.Write("<h1>Setup Web.Config parameters</h1>");
	Response.Write("Setup all necessary Xmlnuke Web.Config parameters. <br><br>");
	Response.Write("<a href='check_install.aspx?action=config'>Click here to continue</a>");
}

void EditConfig()
{
	Response.Write("<h1>Edit Configuration File</h1>");
	
	if (!String.IsNullOrEmpty(Request.Form["xmlnuke_ROOTDIR"]))
	{
		ArrayList errors = createConfigFile();
		if (errors.Count > 0)
		{
			Response.Write("<font color='red'><b>Some errors are found. Config file was not saved! Please check it and try again</b></font><ul>");
			foreach (object value in errors)
			{
				Response.Write("<li>" + value.ToString() + "</li>");
			}
			Response.Write("</ul>");
		}
		else
		{
			Response.Write ("Data Sucessuful updated. <a href='?action=config'>Click here to reload data</a>");
			Response.Write ("<br/><a href='default.aspx'>Click here to go to Xmlnuke index page</a>");
			Response.End();
		}
	}
	
	NameValueCollection configValues = new NameValueCollection();
	object appSettings = Context.GetSection("appSettings");
	if (appSettings != null && appSettings is NameValueCollection)
	{
		foreach (string key in ((NameValueCollection)appSettings).Keys)
		{
			string value = ((NameValueCollection)appSettings)[key];
			configValues[key] = value;
		}
	}
	else if (appSettings != null && appSettings is System.Configuration.AppSettingsSection)
	{
		System.Configuration.AppSettingsSection appSettingsObj = ((System.Configuration.AppSettingsSection)appSettings);
		foreach (string key in appSettingsObj.Settings.AllKeys)
		{
			string value = appSettingsObj.Settings[key].Value;
			configValues[key] = value;
		}
	}
		
	if (appSettings == null || String.IsNullOrEmpty(configValues["xmlnuke.ROOTDIR"]))
	{
		// Default Values
		configValues["xmlnuke.ROOTDIR"] = "~/data";
		configValues["xmlnuke.USEABSOLUTEPATHSROOTDIR"] = "false";
		configValues["xmlnuke.URLMODULE"] = "xmlnuke.aspx";
		configValues["xmlnuke.URLXMLNUKEADMIN"] = "xmlnukeadmin.aspx";
		configValues["xmlnuke.URLXMLNUKEENGINE"] = "xmlnuke.aspx";
		configValues["xmlnuke.DEFAULTSITE"] = "sample";
		configValues["xmlnuke.DEFAULTPAGE"] = "page";
		configValues["xmlnuke.LOGINMODULE"] = "login";
		configValues["xmlnuke.URLBASE"] = "";
		configValues["xmlnuke.ALWAYSUSECACHE"] = "false";
		configValues["xmlnuke.SHOWCOMPLETEERRORMESSAGES"] = "true";
		configValues["xmlnuke.LANGUAGESAVAILABLE"] = "en-us=English (United States)|pt-br=Portugu&#234;s (Brasil)";
		configValues["xmlnuke.SMTPSERVER"] = "localhost";
		configValues["xmlnuke.USERSDATABASE"] = "";
		configValues["xmlnuke.USERSCLASS"] = "";
		configValues["xmlnuke.DEBUG"] = "false";
		configValues["xmlnuke.ENABLEPARAMPROCESSOR"] = "true";
		configValues["xmlnuke.USEFULLPARAMETER"] = "true";
		configValues["xmlnuke.CHECKCONTENTTYPE"] = "true";
		configValues["xmlnuke.CACHESTORAGEMETHOD"] = "PLAIN";
		configValues["xmlnuke.XMLSTORAGEMETHOD"] = "PLAIN";
		configValues["xmlnuke.EXTERNALSITEDIR"] = "";
		configValues["ROOTDIR_APPWEB"] = "data";
	}

	string[] langsAux = new string[]{
		"",
		"pt-br=Portugu&#234;s (Brasil)",
		"en-us=English (United States)",
		"fr-fr=Fran&#231;ais",
		"it-it=Italiano",
		"de-de=Deutsch",
		"",
		"ar-dz=&#1580;&#1586;&#1575;&#1574;&#1585;&#1610; &#1593;&#1585;&#1576;&#1610;",
		"bg-bg=&#1041;&#1098;&#1083;&#1075;&#1072;&#1088;&#1089;&#1082;&#1080;",
		"ca-es=Catal&#224;",
		"cs-cz=&#268;e&#353;tina",
		"da-dk=Dansk",
		"el-gr=&#917;&#955;&#955;&#951;&#957;&#953;&#954;&#940;",
		"en-gb=English (Great Britain)",
		"es-es=Espa&#241;ol",
		"et-ee=Eesti",
		"fi-fi=Suomi",
		"gl-gz=Galego",
		"he-il=&#1506;&#1489;&#1512;&#1497;&#1514;",
		"hu-hu=Magyar",
		"id-id=Bahasa Indonesia",
		"is-is=&#205;slenska",
		"ja-jp=Japanese",
		"lv-lv=Latvie&#353;u",
		"nl-nl=Nederlands",
		"no-no=Norsk",
		"pl-pl=Polski",
		"pt-pt=Portugu&#234;s (Portugal)",
		"ro-ro=Rom&#226;n&#259;",
		"ru-ru=&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;",
		"sk-sk=Sloven&#269;ina",
		"sv-se=Svenska",
		"th-th=Thai",
		"uk-ua=&#1059;&#1082;&#1088;&#1072;&#1111;&#1085;&#1089;&#1100;&#1082;&#1072;",
		"zh-cn=Chinese (Simplified)",
		"zh-tw=Chinese (Traditional)",
	};
	
	NameValueCollection langs = new NameValueCollection();
	for(int i=0;i<langsAux.Length;i++)
	{
		langs.Add(i.ToString(), langsAux[i]);
	}
	
	Response.Write("<form method='post' action='?action=config'>");
	Response.Write("<table width='600'><tr><td>");
	
	writeInputData(configValues, "xmlnuke.ROOTDIR", 
		"Path where Snippets and sites are located (Don't add Slashs on the end). " + 
		" This Path can be VIRTUAL ou ABSOLUTE (e.g. C:\\XMLNuke\\Sites).  " + 
		" Set the parameter USEABSOLUTEPATHSROOTDIR to determine the behavior", 1);

	writeInputData(configValues, "xmlnuke.USEABSOLUTEPATHSROOTDIR", 
		"Defines how the property <i>xmlnuke.ROOTDIR</i> will understand the directory. " + 
		"If false, the directory is relative from current directory. " +
		"If true, the directory is an absolute path. ", 2);

	writeInputData(configValues, "xmlnuke.URLXMLNUKEENGINE", 
		"The script name of XMLNuke front controller for run xmlnuke static pages", 1);

	writeInputData(configValues, "xmlnuke.URLMODULE",
		"The script name of XMLNuke front controller for execute modules", 1);

	writeInputData(configValues, "xmlnuke.URLXMLNUKEADMIN", 
		"The script name of XMLNukeAdmin front controller", 1);

	writeInputData(configValues, "xmlnuke.DEFAULTSITE",
		"Default site name", 1);

	writeInputData(configValues, "xmlnuke.DEFAULTPAGE",
		"Default XSL Style", 1);

	writeInputData(configValues, "xmlnuke.LOGINMODULE",
		"Default Login Module", 1);
		
	writeInputData(configValues, "xmlnuke.URLBASE",
		"Define the base URL of XMLNuke installation. For example: " +
		"http://www.somesite.com/xmlnuke-csharp/. " + 
		"This is optional and you can safely leave blank this parameter.", 1);		

	writeInputData(configValues, "xmlnuke.ALWAYSUSECACHE", 
		"Enable/Disable the cache system on XMLNuke. Avoid set this option to false. " + 
		"This option is useful when you cannot change the write permissions, " +
		"but the system will be slower", 2);

	writeInputData(configValues, "xmlnuke.SHOWCOMPLETEERRORMESSAGES",
		"Show complete and usefull information for debug. Disable this option in production environments", 2);

	writeInputData(configValues, "xmlnuke.LANGUAGESAVAILABLE", 
		"Default set of Languages XMLNuke Expected to find. This set may override at admin " +
		"tool CustomConfig", 9999, langs);

	writeInputData(configValues, "xmlnuke.SMTPSERVER", 
		"Smtp Server. You can use the format USER:PASS@SERVER:PORT or only just use SERVER. ", 1);

	writeInputData(configValues, "xmlnuke.USERSDATABASE",
		"Where XMLNuke look up for the users. Leave empty to store in single XML, or put a value " +
		"for a valid connection string in XMLNuke.", 1);
		
	writeInputData(configValues, "xmlnuke.USERSCLASS",
		"XMLNuke will use this class for access custom access users. Empty values uses the default class. ", 1);
		
	writeInputData(configValues, "xmlnuke.DEBUG", 
		"Put XMLNuke in Debug mode", 2);


	writeInputData(configValues, "xmlnuke.ENABLEPARAMPROCESSOR", 
		"Enable or disable the PARAMPROCESSOR diretive. " + 
		"ParamProcessor enable post processing on your XML/XSL transformed looking for [param:....]. " +
		"This feature, if enable, uses resources from your Web Server causing low performance. " +
		"TIP: If high performance is critical, set to false this option. ", 2);
		

	writeInputData(configValues, "xmlnuke.USEFULLPARAMETER", 
		"If true, XMLNuke will complete all basic parameters (xml, xsl, site and lang). " +
		"If false, XMLNuke will complete only the values are different from defValue values ", 2);

	writeInputData(configValues, "xmlnuke.CHECKCONTENTTYPE", 
		"XMLNuke can check if a XSL transformation generate a document with a specific type. " + 
		"The relation between XSL and content is located at: setup/content-type.anydata.xml ", 2);

	NameValueCollection hashed = new NameValueCollection();
	hashed.Add("PLAIN", "Plain(Flat) directory");
	hashed.Add("HASHED", "Hashed Directory Structure");
	writeInputData(configValues, "xmlnuke.CACHESTORAGEMETHOD", 
		"How XMLNuke will be store the cache in filesystem", 3, 
		hashed);

	writeInputData(configValues, "xmlnuke.XMLSTORAGEMETHOD", 
		"How XMLNuke will be store XML documents in filesystem", 3, 
		hashed);
		
    writeInputData(configValues, "xmlnuke.EXTERNALSITEDIR", 
    	"Sets the path for sites that are not stored within the structure of xmlnuke.ROOTDIR. " +
    	"You need to configure a pair of values in this option. The first value defines the name of the site,  " +
    	"and the second defines the physical path of the site. You can safely leave this option blank.", 4);
    
	Response.Write("</td></tr></table>");
	
	Response.Write("<br><b>Warning!!! This operation will be override your existing Web.Config file</b><br>");
	Response.Write("<input type='submit' value='Create Config File'></form>");

}


////////
//////// UTILITiES FUNCTION
////////

void writeInputData(NameValueCollection configValues, string name, string desc, int type)
{
	writeInputData(configValues, name, desc, type, null);
}

void writeInputData(NameValueCollection configValues, string name, string desc, int type, NameValueCollection list)
{
	string curValue = configValues[name];
	Response.Write("<b>" + name + "</b><br>");
	Response.Write(desc + "<br>");
	
	name = name.Replace(".", "_");
	
	if (type == 1)
	{
		Response.Write("<input type='text' name='" + name + "' value='" + curValue + "'>");
	}
	else if (type == 2)
	{
		Response.Write("<select name='" + name + "'>");
		Response.Write("<option value='true' " + (curValue == "true" ? "selected" : "") + ">True</option>");
		Response.Write("<option value='false' " + (curValue == "false" ? "selected" : "") + ">False</option>");
		Response.Write("</select>");
	}
	else if (type == 3)
	{
		Response.Write("<select name='" + name + "'>");
		writeOptionList(list, curValue);
		Response.Write("</select>");
	}
	else if (type == 4)
	{
		int i = 0;
		if (curValue != "")
		{
			string[] pairItemArray = curValue.Split('|');
			foreach (string pairItem in pairItemArray) 
			{
				string[] pair = pairItem.Split('=');
				Response.Write("<input type='text' name='" + name + i.ToString() + "_key' value='" + pair[0] + "' size='8'>");
				Response.Write(" = <input type='text' name='" + name + i.ToString() + "_value' value='" + pair[1] + "' size='40'><br/>");
				i++;
			}
		}
		for (int j=0; j<3; j++)
		{
			Response.Write("<input type='text' name='" + name + i.ToString() + "_key' value='' size='8'>");
			Response.Write(" = <input type='text' name='" + name + i.ToString() + "_value' value='' size='40'><br/>");
			i++;
		}
		Response.Write("<input type='hidden' name='" + name + "' value='" + i.ToString() + "'>");
	}
	else if (type == 9999)
	{
		string[] curValueArray = new string[] {};
		if (!String.IsNullOrEmpty(curValue))
			curValueArray = curValue.Split('|');
		int key = -1;
		foreach (string value in curValueArray)
		{
			Response.Write("<select name='" + name + (++key).ToString() + "'>");
			writeOptionList(list, value, true);
			Response.Write("</select><br>");
		}
		Response.Write("<select name='" + name + (++key).ToString() + "'>");
		writeOptionList(list, "", true);
		Response.Write("</select><br>");
		Response.Write("<select name='" + name + (++key).ToString() + "'>");
		writeOptionList(list, "", true);
		Response.Write("</select><br>");
		Response.Write("<input type='hidden' name='" + name + "' value='" + key.ToString() + "'>");
	}

	Response.Write("<br><br>");
}

void writeOptionList(NameValueCollection list, string defValue)
{
	writeOptionList(list, defValue, false);
}

void writeOptionList(NameValueCollection list, string defValue, bool keyEqualValue)
{
	foreach (string key in list.Keys)
	{
		string value = list[key];
		
		if (keyEqualValue)
		{
			bool selected = false;
			if ( (defValue.Length >= 5) && (value.Length >= 5) && (value.Substring(0, 5) == defValue.Substring(0, 5)) )
			{
				selected = true;
			}
			Response.Write("<option value='" + value + "' " + (selected ? "selected" : "") + ">" + value + "</option>");
		}
		else 
		{
			Response.Write("<option value='" + key + "' " + (key == defValue ? "selected" : "") + ">" + value + "</option>");
		}
	}
}

ArrayList createConfigFile()
{
	ArrayList errors = new ArrayList();
	
	string fileContent = System.IO.File.ReadAllText(Server.MapPath("~/web.config.template"));
	
	foreach (string key in Request.Form)
	{
		string value = Request.Form[key];
		
		string name =  key.Replace("_", ".");
			
		if (key == "xmlnuke_ROOTDIR")
		{
			string dir = ( Request.Form["xmlnuke_USEABSOLUTEPATHSROOTDIR"] == "true" ? value : Request.MapPath(value) );
			if (!System.IO.Directory.Exists(dir))
			{
				errors.Add("Directory '" + value + "' defined in 'xmlnuke.ROOTDIR' does not exists");
			}
			else if (!is_writeable(dir))
			{
				errors.Add("Directory '" + value + "' is not writeable. Please check this and try again.");
			}
		}
		else if (key == "xmlnuke_LANGUAGESAVAILABLE")
		{
			int qty = Convert.ToInt32(Request.Form[key]);
			value = "";
			for(int i=0; i<=qty; i++)
			{
				if (!String.IsNullOrEmpty(Request.Form[key + i.ToString()])) value += (!String.IsNullOrEmpty(value) ? "|" : "") + Request.Form[key + i.ToString()];
			}
		}
		else if (key == "xmlnuke_EXTERNALSITEDIR")
		{
			int qty = Convert.ToInt32(Request.Form[key]);
			value = "";
			for(int i=0; i<qty; i++)
			{
				string siteName = Request.Form[key + i.ToString() + "_key"];
				if (siteName != "") 
				{
					string sitePath = Request.Form[key + i.ToString() + "_value"];
					if (!System.IO.Directory.Exists(sitePath))
					{
						errors.Add("The config option '" + key + "' has a hey '" + siteName + "' which defines a directory '" + sitePath + "' that does not exists.");
					}
					value += (value!="" ? "|" : "") + siteName + "=" + sitePath;					
				}
			}
		}
		else if (key.Contains("xmlnuke_LANGUAGESAVAILABLE") || key.Contains("xmlnuke_EXTERNALSITEDIR"))
		{
			continue;
		}
		
		fileContent = fileContent.Replace("[" + name + "]", value);
	}
	
	if (errors.Count == 0)
	{
		fileContent = fileContent.Replace("[DATE]", System.DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
		string rootDirAppWeb = Request.Form["xmlnuke_ROOTDIR"].ToString().Replace("~/", "");
		if (Request.Form["xmlnuke_USEABSOLUTEPATHSROOTDIR"] == "true")
		{
			rootDirAppWeb = "data";
		}	
		fileContent = fileContent.Replace("[ROOTDIR_APPWEB]", rootDirAppWeb);
		try
		{
			System.IO.File.WriteAllText(Server.MapPath("~/web.config"), fileContent);
		}
		catch (Exception ex)
		{
			string newWebConfig = DateTime.Now.ToString("yyyy-MM-dd");
			try
			{
				System.IO.File.WriteAllText(Server.MapPath("~/web.config." + newWebConfig), fileContent);
				errors.Add("I could not write to Web.Config your setup. Instead I save the file 'web.config." + newWebConfig + "'. You have to manually copy to web.config.");
			}
			catch (Exception ex2)
			{
				errors.Add("I could not write to Web.Config your setup. Please check you file permissions. Orginal error message is: " + ex2.Message);
			}
		}
	}
	
	return errors;
}

bool is_writeable(string dir)
{
	try
	{
		FileIOPermission fp = new FileIOPermission(FileIOPermissionAccess.Write, dir);
		FileIOPermission fpWrite = new FileIOPermission(PermissionState.None);
		return (fpWrite.IsSubsetOf(fp));
	}
	catch(Exception ex)
	{
		//Debug.WriteLine(ex.ToString());
		//Response.Write("<b>Error getting permissions</b>");
		return false;
	}
}

</script>

<%
string action = Request.QueryString["action"];

if (action == "config")
{
	EditConfig();	
}
else
{
	WelcomeMessage();
}
%>



</HTML>
