<?php

namespace Xmlnuke\Util;

use Xmlnuke\Core\Enum\DATEFORMAT;
use Xmlnuke\Core\Enum\DateParts;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-21 at 14:05:29.
 */
class DateUtilTest extends \PHPUnit_Framework_TestCase
{


	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::Today
	 * @todo   Implement testToday().
	 */
	public function testToday()
	{
		$date1 = date('d/m/Y') ;
		$date2 = DateUtil::Today(DATEFORMAT::DMY);
		$this->assertEquals($date1, $date2);

		$date1 = date('m/d/Y') ;
		$date2 = DateUtil::Today(DATEFORMAT::MDY);
		$this->assertEquals($date1, $date2);

		$date1 = date('Y/m/d') ;
		$date2 = DateUtil::Today(DATEFORMAT::YMD);
		$this->assertEquals($date1, $date2);

		$date1 = date('Y-m-d') ;
		$date2 = DateUtil::Today(DATEFORMAT::YMD, '-');
		$this->assertEquals($date1, $date2);

		$date1 = date('Y/m/d H:i:s') ;
		$date2 = DateUtil::Today(DATEFORMAT::YMD, '/', true);
		$this->assertEquals($date1, $date2);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::FormatDate
	 * @todo   Implement testFormatDate().
	 */
	public function testFormatDate()
	{
		$date1 = date('Y/m/d') ;
		$date2 = DateUtil::FormatDate(time());
		$this->assertEquals($date1, $date2);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::ConvertDate
	 * @todo   Implement testConvertDate().
	 */
	public function testConvertDate()
	{
		$date1 = '2014/01/30';
		$date2 = DateUtil::ConvertDate($date1, DATEFORMAT::YMD, DATEFORMAT::DMY);
		$this->assertEquals('30/01/2014', $date2);

		$date1 = '2014/01/30 23:50:10';
		$date2 = DateUtil::ConvertDate($date1, DATEFORMAT::YMD, DATEFORMAT::DMY, '/', true);
		$this->assertEquals('30/01/2014 23:50:10', $date2);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::Validate
	 * @todo   Implement testValidate().
	 */
	public function testValidate()
	{
		$date1 = '2014/01/30';
		$status = DateUtil::Validate($date1, DATEFORMAT::YMD);
		$this->assertTrue($status);

		$date1 = '2014/01/30';
		$status = DateUtil::Validate($date1, DATEFORMAT::DMY);
		$this->assertFalse($status);

		$date1 = '2014-01-30';
		$status = DateUtil::Validate($date1, DATEFORMAT::YMD);  // Different separators ('-' and '/')
		$this->assertFalse($status);

		$date1 = '2001/02/29';
		$status = DateUtil::Validate($date1, DATEFORMAT::YMD);
		$this->assertFalse($status);

		$date1 = '2000/02/29';
		$status = DateUtil::Validate($date1, DATEFORMAT::YMD);
		$this->assertTrue($status);

		$date1 = '2000/02/29 23:45:59';
		$status = DateUtil::Validate($date1, DATEFORMAT::YMD, '/');
		$this->assertTrue($status);

		$date1 = '2000/02/29 23:45';
		$status = DateUtil::Validate($date1, DATEFORMAT::YMD);
		$this->assertTrue($status);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::DateAdd
	 * @todo   Implement testDateAdd().
	 */
	public function testDateAdd()
	{
		$date1 = '2000/02/01';
		$date2 = DateUtil::DateAdd($date1, 1);
		$this->assertEquals('2000/02/02', $date2);

		$date1 = '2000/02/01';
		$date2 = DateUtil::DateAdd($date1, 29);
		$this->assertEquals('2000/03/01', $date2);

		$date1 = '2000/12/31';
		$date2 = DateUtil::DateAdd($date1, 1);
		$this->assertEquals('2001/01/01', $date2);

		$date1 = '2000/02/01';
		$date2 = DateUtil::DateAdd($date1, -1);
		$this->assertEquals('2000/01/31', $date2);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::DateDiff
	 * @todo   Implement testDateDiff().
	 */
	public function testDateDiff()
	{
		$date1 = '2000-02-01';
		$date2 = '2000-03-01';
		$days = DateUtil::DateDiff($date2, $date1);  // From do new date to old date
		$this->assertEquals(29, $days);

		$days = DateUtil::DateDiff($date1, $date2);  // Negative number
		$this->assertEquals(-30, $days);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::TimeStampFromStr
	 * @todo   Implement testTimeStampFromStr().
	 */
	public function testTimeStampFromStr()
	{
		$timestamp1 = mktime(0, 0, 0, 11, 28, 1999);
		$timestamp2 = DateUtil::TimeStampFromStr('1999/11/28');
		$this->assertEquals($timestamp1, $timestamp2);

		$timestamp1 = mktime(23, 45, 0, 11, 28, 1999);
		$timestamp2 = DateUtil::TimeStampFromStr('1999/11/28 23:45');
		$this->assertEquals($timestamp1, $timestamp2);
	}

	/**
	 * @covers Xmlnuke\Util\DateUtil::GetDateParts
	 * @todo   Implement testGetDateParts().
	 */
	public function testGetDateParts()
	{
		$datePart = DateUtil::GetDateParts('2013/01/30 23:50:45', DATEFORMAT::YMD);
		$this->assertEquals('2013/01/30', $datePart[DateParts::DATE]);
		$this->assertEquals('30', $datePart[DateParts::DAY]);
		$this->assertEquals('01', $datePart[DateParts::MONTH]);
		$this->assertEquals('2013', $datePart[DateParts::YEAR]);
		$this->assertEquals('23:50:45', $datePart[DateParts::TIME]);
		$this->assertEquals('23', $datePart[DateParts::HOUR]);
		$this->assertEquals('50', $datePart[DateParts::MINUTE]);
		$this->assertEquals('45', $datePart[DateParts::SECOND]);
		$this->assertEquals('2013/01/30 23:50:45', $datePart[DateParts::FULL]);

		$datePart = DateUtil::GetDateParts('01/30/2013 23:50:45', DATEFORMAT::MDY);
		$this->assertEquals('01/30/2013', $datePart[DateParts::DATE]);
		$this->assertEquals('30', $datePart[DateParts::DAY]);
		$this->assertEquals('01', $datePart[DateParts::MONTH]);
		$this->assertEquals('2013', $datePart[DateParts::YEAR]);
		$this->assertEquals('23:50:45', $datePart[DateParts::TIME]);
		$this->assertEquals('23', $datePart[DateParts::HOUR]);
		$this->assertEquals('50', $datePart[DateParts::MINUTE]);
		$this->assertEquals('45', $datePart[DateParts::SECOND]);
		$this->assertEquals('01/30/2013 23:50:45', $datePart[DateParts::FULL]);

		$datePart = DateUtil::GetDateParts('30/01/2013 23:50:45', DATEFORMAT::DMY);
		$this->assertEquals('30/01/2013', $datePart[DateParts::DATE]);
		$this->assertEquals('30', $datePart[DateParts::DAY]);
		$this->assertEquals('01', $datePart[DateParts::MONTH]);
		$this->assertEquals('2013', $datePart[DateParts::YEAR]);
		$this->assertEquals('23:50:45', $datePart[DateParts::TIME]);
		$this->assertEquals('23', $datePart[DateParts::HOUR]);
		$this->assertEquals('50', $datePart[DateParts::MINUTE]);
		$this->assertEquals('45', $datePart[DateParts::SECOND]);
		$this->assertEquals('30/01/2013 23:50:45', $datePart[DateParts::FULL]);

		$datePart = DateUtil::GetDateParts('30/01/2013 23:50', DATEFORMAT::DMY);
		$this->assertEquals('30/01/2013', $datePart[DateParts::DATE]);
		$this->assertEquals('30', $datePart[DateParts::DAY]);
		$this->assertEquals('01', $datePart[DateParts::MONTH]);
		$this->assertEquals('2013', $datePart[DateParts::YEAR]);
		$this->assertEquals('23:50:00', $datePart[DateParts::TIME]);
		$this->assertEquals('23', $datePart[DateParts::HOUR]);
		$this->assertEquals('50', $datePart[DateParts::MINUTE]);
		$this->assertEquals('00', $datePart[DateParts::SECOND]);
		$this->assertEquals('30/01/2013 23:50:00', $datePart[DateParts::FULL]);

		$datePart = DateUtil::GetDateParts('30/01/2013 23', DATEFORMAT::DMY);
		$this->assertEquals('30/01/2013', $datePart[DateParts::DATE]);
		$this->assertEquals('30', $datePart[DateParts::DAY]);
		$this->assertEquals('01', $datePart[DateParts::MONTH]);
		$this->assertEquals('2013', $datePart[DateParts::YEAR]);
		$this->assertEquals('23:00:00', $datePart[DateParts::TIME]);
		$this->assertEquals('23', $datePart[DateParts::HOUR]);
		$this->assertEquals('00', $datePart[DateParts::MINUTE]);
		$this->assertEquals('00', $datePart[DateParts::SECOND]);
		$this->assertEquals('30/01/2013 23:00:00', $datePart[DateParts::FULL]);

		$datePart = DateUtil::GetDateParts('30/01/2013', DATEFORMAT::DMY);
		$this->assertEquals('30/01/2013', $datePart[DateParts::DATE]);
		$this->assertEquals('30', $datePart[DateParts::DAY]);
		$this->assertEquals('01', $datePart[DateParts::MONTH]);
		$this->assertEquals('2013', $datePart[DateParts::YEAR]);
		$this->assertEquals('00:00:00', $datePart[DateParts::TIME]);
		$this->assertEquals('00', $datePart[DateParts::HOUR]);
		$this->assertEquals('00', $datePart[DateParts::MINUTE]);
		$this->assertEquals('00', $datePart[DateParts::SECOND]);
		$this->assertEquals('30/01/2013 00:00:00', $datePart[DateParts::FULL]);

		// Invalid Date
		$datePart = DateUtil::GetDateParts('50/01/2013 23:50:45', DATEFORMAT::DMY);
		$this->assertEquals('00/00/0000', $datePart[DateParts::DATE]);
		$this->assertEquals('00', $datePart[DateParts::DAY]);
		$this->assertEquals('00', $datePart[DateParts::MONTH]);
		$this->assertEquals('0000', $datePart[DateParts::YEAR]);
		$this->assertEquals('00:00:00', $datePart[DateParts::TIME]);
		$this->assertEquals('00', $datePart[DateParts::HOUR]);
		$this->assertEquals('00', $datePart[DateParts::MINUTE]);
		$this->assertEquals('00', $datePart[DateParts::SECOND]);
		$this->assertEquals('00/00/0000 00:00:00', $datePart[DateParts::FULL]);
	}

}
