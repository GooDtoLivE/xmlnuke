<?php
/*
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 *  Copyright:
 *
 *  XMLNuke: A Web Development Framework based on XML.
 *
 *  Main Specification: Joao Gilberto Magalhaes, joao at byjg dot com
 *
 *  This file is part of XMLNuke project. Visit http://www.xmlnuke.com
 *  for more information.
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 */

namespace Xmlnuke\Core\Classes;

use Xmlnuke\Core\AnyDataset\AnyDataSet;
use Xmlnuke\Core\AnyDataset\DBDataSet;
use Xmlnuke\Core\AnyDataset\IteratorFilter;
use Xmlnuke\Core\Engine\Context;
use Xmlnuke\Core\Engine\ObjectHandler;
use Xmlnuke\Core\Enum\ChartColumnType;
use Xmlnuke\Core\Enum\ChartType;
use Xmlnuke\Core\Enum\Relation;
use Xmlnuke\Core\Locale\LanguageCollection;
use Xmlnuke\Core\Locale\LanguageFactory;
use Xmlnuke\Core\Processor\AnydatasetFilenameProcessor;
use Xmlnuke\Util\XmlUtil;

/**
 * @package xmlnuke
 */
class  XmlnukePoll extends XmlnukeDocumentObject
{
	/**
	*@var Context
	*/
	private $_context;
	/**
	*@var string
	*/
	private $_url;
	/**
	*@var string
	*/
	private $_poll;
	/**
	*@var string
	*/
	private $_lang;
	/**
	*@var bool
	*/
	private $_processed;
	/**
	*@var LanguageCollection
	*/
	private $_myWords;
	/**
	 * @var AnyDataSet
	 */
	private $_anyPoll;
	/**
	 * @var AnyDataSet
	 */
	private $_anyAnswer;

	private $_width;
	private $_height;

	/* POLL CONFIG */
	protected $_tblpoll = "";
	protected $_tblanswer = "";
	protected $_tbllastip = "";
	protected $_isdb = false;
	protected $_connection = "";
	protected $_error = false;

	/**
	 * Initialize a poll context
	 * Use the method processData to process data.
	 *
	 * @param Context $context
	 * @param string $urlProcess
	 * @param string $poll
	 * @param string $lang
	 * @return XmlnukePoll
	 */
	public function __construct($urlProcess, $poll, $lang = "")
	{
		$this->_context = Context::getInstance();
		$this->_url = $urlProcess;
		$this->_poll = $poll;
		if ($lang != "")
		{
			$this->_lang = $lang;
		}
		else
		{
			$this->_lang = $this->_context->Language()->getName();
		}
		$this->_processed = false;
		$this->getPollConfig();
		$this->_myWords = LanguageFactory::GetLanguageCollection(get_class());
	}

	/**
	 * Get informations about WHERE I need to store poll data
	 *
	 */
	protected function getPollConfig()
	{
		$pollfile = new AnydatasetFilenameProcessor("_poll");
		$anyconfig = new AnyDataSet($pollfile);

		$it = $anyconfig->getIterator();
		if ($it->hasNext())
		{
			$sr = $it->moveNext();
			$this->_isdb = $sr->getField("dbname") != "-anydata-";
			$this->_connection = $sr->getField("dbname");
			$this->_tblanswer = $sr->getField("tbl_answer");
			$this->_tblpoll = $sr->getField("tbl_poll");
			$this->_tbllastip = $sr->getField("tbl_lastip");
		}
		else
		{
			$this->_error = true;
		}
	}

	/**
	 * Get AnydataSet Poll information
	 *
	 */
	protected function getAnyData()
	{
		$filepoll = new AnydatasetFilenameProcessor("poll_list");
		$this->_anyPoll = new AnyDataSet($filepoll);
		$fileanswer = new AnydatasetFilenameProcessor("poll_" . $this->_poll . "_" . $this->_lang);
		$this->_anyAnswer = new AnyDataSet($fileanswer);
	}

	/**
	 * Process Vote. Note that the system ONLY process the vote if there is no another equal IP.
	 *
	 * @param int $width
	 * @param int $height
	 */
	public function processVote($width=450, $height=400)
	{
		if ($this->_context->get("xcrt") == "") // TRICK CODE HERE. THIS VALUE IS GENERATED BY CHART.
														 // WE HAVE TO USE THIS TO AVOID TWO processVote() calling.
		{
			// Is The Post values needed to process vote exists?
			if (($this->_context->get("xmlnuke_poll") != "") && ($this->_context->get("xmlnuke_polllang") != "") && ($this->_context->get("xmlnuke_pollanswer") != ""))
			{
				$this->_poll = $this->_context->get("xmlnuke_poll");
				$this->_lang = $this->_context->get("xmlnuke_polllang");

				$ok = true;
				// Check if IP already voted -> Freeze IP for 5 days.
				if ($this->_isdb)
				{
					// Remove Old Entries
					$dbdata = new DBDataSet($this->_connection);
					$sql = "delete from " . $this->_tbllastip . " where register < now() - interval 5 day ";
					$dbdata->execSQL($sql);

					// Check if exists
					$sql = "select count(1) from " . $this->_tbllastip . " where ip = [[ip]] and name = [[name]] ";
					$param = array(
						"ip" => $this->_context->getClientIp(),
						"name" => $this->_poll
					);
					$count = $dbdata->getScalar($sql, $param);

					$ok = false;
					if ($count == 0)
					{
						$ok = true;

						$sql = "insert into " . $this->_tbllastip . " (ip, name, register) values ([[ip]], [[name]], now()) ";
						$param = array(
							"ip" => $this->_context->getClientIp(),
							"name" => $this->_poll
						);
						$dbdata->execSQL($sql, $param);
					}
				}

				// Is My IP Unique? If true I can process the vote.
				// Note if the poll name, lang and code are wrong the system does not do anything.
				if ($ok)
				{
					// Get Data
					$itf = new IteratorFilter();
					$itf->addRelation("name", Relation::Equal, $this->_poll);
					$itf->addRelation("lang", Relation::Equal, $this->_lang);
					$itf->addRelation("code", Relation::Equal, $this->_context->get("xmlnuke_pollanswer"));
					if ($this->_isdb)
					{
						$dbdata = new DBDataSet($this->_connection, $this->_context);
						$param = array();
						$sql = $itf->getSql($this->_tblanswer, $param); // Use only to get Where clause
						$i = strpos($sql, $this->_tblanswer);
						$sql = "update " . $this->_tblanswer . " set " .
							" votes = IFNULL(votes,0) + 1 " .
							substr($sql, $i + strlen($this->_tblanswer) + 1);
						$dbdata->execSQL($sql, $param);
					}
					else
					{
						$this->getAnyData();
						$itAnswer = $this->_anyAnswer->getIterator($itf);
						if ($itAnswer->hasNext())
						{
							$sr = $itAnswer->moveNext();
							$sr->setField("votes", intval($sr->getField("votes"))+1);
							$this->_anyAnswer->Save();
						}
					}
				}

				$this->_processed = true;
			}
		}
		else
		{
			$this->_processed = true;
		}
		$this->_width = $width;
		$this->_height = $height;
	}

	public function generateObject($current)
	{
		// Is there some error?
		if ($this->_error)
		{
			$nodeWorking = XmlUtil::CreateChild($current, "poll");
			XmlUtil::CreateChild($nodeWorking, "error", $this->_myWords->Value("ERROR_POLLNOTSETUP"));
		}
		else
		{
			// Get Data to SHOW the answers OR chart.
			$itf = new IteratorFilter();
			$itf->addRelation("name", Relation::Equal, $this->_poll);
			$itf->addRelation("lang", Relation::Equal, $this->_lang);
			if ($this->_isdb)
			{
				$dbdata = new DBDataSet($this->_connection, $this->_context);
				$param = array();
				$sql = $itf->getSql($this->_tblpoll, $param);
				$itPoll = $dbdata->getIterator($sql, $param);
				$param = array();
				$sql = $itf->getSql($this->_tblanswer, $param);
				$itAnswer = $dbdata->getIterator($sql, $param);
			}
			else
			{
				$this->getAnyData();
				$itPoll = $this->_anyPoll->getIterator($itf);
				$itAnswer = $this->_anyAnswer->getIterator($itf);
			}

			// Show the answers if not was called the method processVote()
			if (!$this->_processed)
			{
				$nodeWorking = XmlUtil::CreateChild($current, "poll");
				XmlUtil::AddAttribute($nodeWorking, "url", $this->_url);
				XmlUtil::AddAttribute($nodeWorking, "name", $this->_poll);
				XmlUtil::AddAttribute($nodeWorking, "lang", $this->_lang);

				// Show Data Only if Poll is active
				if ($itPoll->hasNext())
				{
					$sr = $itPoll->moveNext();
					
					XmlUtil::AddAttribute($nodeWorking, "multiple", $sr->getField("multiple") == "Y" ? "true" : "false");

					if ($sr->getField("active") == "Y")
					{
						XmlUtil::AddAttribute($nodeWorking, "active", "true");
						XmlUtil::AddAttribute($nodeWorking, "sendbtn", $this->_myWords->Value("SENDBTN"));
						XmlUtil::CreateChild($nodeWorking, "question", $sr->getField("question"));

						while ($itAnswer->hasNext())
						{
							$sr = $itAnswer->moveNext();
							$nodeanswer = XmlUtil::CreateChild($nodeWorking, "answer", $sr->getField("answer"));
							XmlUtil::AddAttribute($nodeanswer, "code", $sr->getField("code"));
						}
					}
					else
					{
						XmlUtil::AddAttribute($nodeWorking, "sendbtn", $this->_myWords->Value("VIEWRESULTSBTN"));
						XmlUtil::CreateChild($nodeWorking, "question", $sr->getField("question") . " - " . $this->_myWords->Value("POLLENDED"));
					}
				}
				else
				{
					XmlUtil::CreateChild($nodeWorking, "error", $this->_myWords->Value("ERROR_POLLEMPTY"));
				}
			}
			// Show the chart if poll is processed.
			else
			{
				$srPoll = $itPoll->moveNext();

				if ($srPoll->getField("showresults")=="Y")
				{
					$colors = array('#FFF8A3', '#A9CC8F', '#B2C8D9', '#BEA37A', '#F3AA79', '#B5B5A9', '#E6A5A4',
									'#F8D753', '#5C9746', '#3E75A7', '#7A653E', '#E1662A', '#74796F', '#C4384F',
									'#F0B400', '#1E6C0B', '#00488C', '#332600', '#D84000', '#434C43', '#B30023',
									'#FAE16B', '#82B16A', '#779DBF', '#907A52', '#EB8953', '#8A8D82', '#D6707B',
									'#F3C01C', '#3D8128', '#205F9A', '#63522B', '#DC5313', '#5D645A', '#BC1C39');

					//\Xmlnuke\Util\Debug::PrintValue($itAnswer);

					$info = array();
					$info[] = array("column" => "answer", "type" => ChartColumnType::String, "name" => "Legend");
					$info[] = array("column" => "votes", "type" => ChartColumnType::Number, "name" => "Value");

					$chart = new ChartObject("");
					$chart->setChartType(ChartType::Pie);
					$chart->setIs3d(true);
					$chart->setWidth($this->_width);
					$chart->setHeight($this->_height);
					$chart->addSeriesIterator($itAnswer, $info);

					$object = new ObjectHandler($current, $chart, "xmlnuke");
					$object->CreateObjectFromModel();
				}
				else
				{
					if ($srPoll->getField("active")=="Y")
					{
						$txt = new XmlnukeText($this->_myWords->Value("VOTECOMPUTED"), true);
					}
					else
					{
						$txt = new XmlnukeText($this->_myWords->Value("CANNOTSHOWRESULTS"), true);
					}
					$txt->generateObject($current);
				}
			}
		}
	}

}
?>
